{"version":3,"sources":["store/videoInfoAtoms.js","containers/home/index.jsx","utils/youtubeLinkUtil.js","presentational/image-host/index.jsx","assets/funnygif.gif","containers/image-container/index.jsx","presentational/youtube-video-player/index.jsx","containers/video-player-container/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["videoLinkState","atom","key","default","videoStartTimeState","Home","useRecoilState","setVideoLink","setVideoStartTime","useState","videoLinkText","setVideoLinkText","isValidForm","setIsValidForm","history","useHistory","className","onChange","event","target","value","placeholder","onClick","urlToParse","match","isValidYoutubeUrl","push","style","visibility","class","ImageHost","src","alt","ImageContainer","imageSrc","sampleGif","to","YouTubeVideoPlayer","React","forwardRef","props","ref","videoLink","startTime","youTubePlayer","console","log","opts","playerVars","autoplay","start","Math","ceil","useImperativeHandle","getCurrentTime","videoId","videoUrl","URL","URLSearchParams","search","get","err","error","getVideoIdFromLink","onReady","playVideo","VideoPlayerContainer","useRecoilValue","videoStartTime","setvideoStartTime","youTubePlayerRef","useRef","useLayoutEffect","currentTime","current","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bd78d49.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\nexport const videoLinkState = atom({\r\n    key: 'videoLinkState', // unique ID (with respect to other atoms/selectors)\r\n    default: '', // default value (aka initial value)\r\n});\r\n\r\nexport const videoStartTimeState = atom({\r\n    key: 'videoStartTimeState', // unique ID (with respect to other atoms/selectors)\r\n    default: null, // default value (aka initial value)\r\n});","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilState } from 'recoil';\r\nimport { videoLinkState, videoStartTimeState } from '../../store/videoInfoAtoms';\r\nimport { isValidYoutubeUrl } from '../../utils/youtubeLinkUtil';\r\n\r\nexport const Home = () => {\r\n    const [, setVideoLink] = useRecoilState(videoLinkState);  \r\n    const [, setVideoStartTime] = useRecoilState(videoStartTimeState);       \r\n    const [videoLinkText, setVideoLinkText] = useState('');   \r\n    const [isValidForm, setIsValidForm] = useState(true);   \r\n    const history = useHistory() ;  \r\n    const handleInputChange = (event) => {\r\n        const val = event.target.value;\r\n        if(!val)\r\n            setIsValidForm(true);\r\n        setVideoLinkText(event.target.value);\r\n        \r\n    }\r\n    const handleVideoLinkSave = (event) => {\r\n        setVideoStartTime(null);\r\n        const isValidLink = isValidYoutubeUrl(videoLinkText);\r\n        if(!isValidLink) {\r\n            setIsValidForm(false);\r\n            return;\r\n        }\r\n        setIsValidForm(true);\r\n        setVideoLink(videoLinkText);       \r\n        history.push(\"/video\");\r\n    }\r\n    \r\n    return (\r\n        <div className=\"flex flex-col content-center justify-center w-full\">\r\n            <div className=\"flex content-center justify-center w-full\">\r\n                <input onChange={handleInputChange} value={videoLinkText} placeholder=\"Type / Paste YouTube Video link\"\r\n                    className=\"w-2/3 shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"/>\r\n                <button \r\n                    onClick={handleVideoLinkSave}\r\n                    className=\"border-2 hover:bg-red-500 hover:text-white border-red-500 px-4 py-2 ml-2 rounded\">\r\n                Play</button>             \r\n             </div> \r\n             <div className=\"flex content-center justify-center w-full py-2 px-3\" style={{visibility: isValidForm ? 'hidden' : 'visible' }}>\r\n                <span class=\"text-xs text-red-700\">Invalid YouTube video url</span>    \r\n             </div>\r\n        </div>\r\n       \r\n    )\r\n}","export const getVideoIdFromLink = (videoLink) => {\r\n    try {\r\n        if(!videoLink)\r\n            return '';\r\n        const videoUrl = new URL(videoLink);\r\n        const videoId = new URLSearchParams(videoUrl.search).get(\"v\");\r\n        return videoId;\r\n    } catch(err) {\r\n        console.error(err);\r\n        return '';\r\n    }\r\n} \r\n\r\nexport const isValidYoutubeUrl = (urlToParse) => {\r\n    if (urlToParse) {\r\n        var regExp = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\r\n        if (urlToParse.match(regExp)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","import React from 'react';\r\n\r\nexport const ImageHost = ({src}) => {\r\n    return (\r\n        <div className=\"shadow border-2 border-red-300\">\r\n            <img src={src} alt=\"funny gif\" />\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/funnygif.028ee920.gif\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ImageHost } from '../../presentational/image-host';\r\nimport sampleGif from '../../assets/funnygif.gif';\r\n\r\nexport const ImageContainer = () => {      \r\n    const imageSrc = sampleGif;\r\n    return(\r\n        <div className=\"flex flex-col items-center justify-center w-full\">\r\n            <nav className=\"flex\">\r\n                <Link to=\"/video\"\r\n                    className=\"h-6 px-5 m-2 text-blue-100 transition-colors duration-150 bg-blue-600 focus:shadow-outline hover:bg-blue-700\">\r\n                    Video\r\n                </Link>               \r\n            </nav>\r\n            <ImageHost src={imageSrc}/>            \r\n        </div>\r\n    )\r\n}","import React, { useImperativeHandle, useRef } from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport { getVideoIdFromLink } from '../../utils/youtubeLinkUtil';\r\nexport const YouTubeVideoPlayer = React.forwardRef((props, ref) => {\r\n    const {videoLink, startTime} = props;\r\n    let youTubePlayer = null;\r\n    console.log('start time', startTime);\r\n    const opts = {\r\n        playerVars: {\r\n            autoplay: 1,\r\n            start: Math.ceil(startTime) ?? 0\r\n        }\r\n    }\r\n    const handleOnVideoReady = (event) => {\r\n        youTubePlayer = event.target;       \r\n        event.target.playVideo();\r\n    }\r\n    useImperativeHandle(ref, () => ({\r\n        getCurrentTime: () => {            \r\n            return  youTubePlayer?.getCurrentTime();\r\n        }\r\n    }));\r\n    \r\n    const videoId = getVideoIdFromLink(videoLink);   \r\n    return(\r\n        <div className=\"shadow border-2 border-red-300\">\r\n            <YouTube videoId={videoId} opts={opts}  onReady={handleOnVideoReady}/>\r\n        </div>\r\n        \r\n    )\r\n});","import React, { useLayoutEffect, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useRecoilValue, useRecoilState } from 'recoil';\r\nimport { YouTubeVideoPlayer } from '../../presentational/youtube-video-player';\r\nimport { videoLinkState, videoStartTimeState } from '../../store/videoInfoAtoms';\r\n\r\nexport const VideoPlayerContainer = () => {   \r\n    const videoLink = useRecoilValue(videoLinkState);\r\n    const videoStartTime = useRecoilValue(videoStartTimeState);\r\n    const [, setvideoStartTime] = useRecoilState(videoStartTimeState);       \r\n    const youTubePlayerRef = useRef();\r\n    useLayoutEffect(() => {\r\n        return () => {                      \r\n            const currentTime = youTubePlayerRef.current?.getCurrentTime();\r\n            if(currentTime) {\r\n                setvideoStartTime(currentTime);\r\n            }\r\n        }\r\n    });\r\n    \r\n    return(\r\n        <div className=\"flex flex-col content-center items-center justify-center w-full\">\r\n            <nav className=\"flex\">\r\n                <Link to=\"/home\"\r\n                    className=\"h-6 px-5 m-2 text-blue-100 transition-colors duration-150 bg-blue-600 focus:shadow-outline hover:bg-blue-700\">\r\n                    Home\r\n                </Link>\r\n                <Link to=\"/image\"\r\n                    className=\"h-6 px-5 m-2 text-blue-100 transition-colors duration-150 bg-blue-600 focus:shadow-outline hover:bg-blue-700\">\r\n                GIF</Link>\r\n            </nav>\r\n            <YouTubeVideoPlayer ref={youTubePlayerRef} videoLink={videoLink} startTime={videoStartTime}/>            \r\n        </div>\r\n    )\r\n}","import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport {\n  RecoilRoot, \n} from 'recoil';\nimport { Home } from \"./containers/home\";\nimport { ImageContainer } from \"./containers/image-container\";\nimport { VideoPlayerContainer } from \"./containers/video-player-container\";\n\nfunction App() {\n  return (\n    <div className=\"flex flex-col h-full font-mono\">\n      <div className=\"flex w-full justify-center bg-blue-500 h-12 items-center \">\n        <span className=\"text-lg text-white\">YouTube Video Player</span>\n      </div>      \n      <RecoilRoot>\n        <Router>\n          <div className=\"flex items-center h-full w-full bg-gradient-to-b bg-gray-100\">     \n            <Switch>             \n                <Route path=\"/video\">\n                  <VideoPlayerContainer />\n                </Route>\n                <Route path=\"/image\">      \n                  <ImageContainer />        \n                </Route>\n                <Route path={[\"/\",\"/home\"]}>\n                  <Home />\n                </Route>\n            </Switch>\n          </div>\n        </Router>\n      </RecoilRoot>\n    </div>  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}